1. 서버 구조
(1) 중앙 서버 1개
- 매칭
- 로그인 인증
- 방 생성
-- RoomId 관리

(2) P2P 서버
- 최대 수용 인원: 4명
- 기획 요소
-- 4인 협력 시스템 가능할지?
--- 4인 협력 모바일 디펜스 환경이라서, 디바이스 한 화면에 모두 보여주기는 힘듬
---- 화면 전환 시스템을 통해 반대편 진영의 유저 화면을 볼 수 있게 하는건 어떨지?

-- 재화
--- 플레이어 개인 재화, 게임 서버 공용 재화

2. 이동 처리
- 클라이언트 기반
-- 유니티의 기본 기능들 사용해보자
--- 타일 기반의 맵 관리
--- 타일당 최대 수용 가능 유닛: 유닛 별로 고려해보자

- 서버에서의 처리는?
-- 특정 인터벌마다 위치 검사 및 보정하는 식으로?

3. 랜덤
- 우리만의 Utility를 구현해보기
-- 랜덤 라이브러리를 사용해보는 것도 좋을 것 같음

4. 시간 이벤트(웨이브)
- 타이머 돌리는 방식
- 스크립트 사용해서 관리하는 방식
-- 위 두 가지 방법 중에서 골라보자

5. 판정
- 이건 조금 고려해보자
- 게임 승패 판정
-- 게임 서버에서 판정을 할 지, 여기에 대한 결과를 묶어서 중앙 서버로 전달을 할 지?

- 데미지 판정

6. 로그
- 클라이언트별 로컬 로그 (파일로)
- 게임 Room별 전체 로그 Json으로 묶어서 중앙 서버로 전달 (2안)
-- 중앙 서버로 던지는 과정에서 Fail 나면?
--- 로그 손실

7. 태스크 관리
- Jira & Confluence 사용해서 태스크 관리
(1)이동희 
- Confluence 페이지 구성
- JIRA 관리 형태 잡기

(2) 박용환
- Git 사용해서 형상 관리
-- 브랜치 관리 및 PR 어떻게 할 지? (개발 브랜치, 라이브 브랜치)

=> 우리가 당장 해야할 것
[공용]
- 커밋 룰 정리
-- 커밋하는 내용에는 JIRA 이슈 번호 및 작업 내용 기입
-- Description에 JIRA 이슈 번호만 기입
--- ex) Commit: [JIRA-01]/기능 개발
---     Description: [JIRA-01] URL

- 용어 정리
-- Room, Channel
-- Entity, Character, Npc, Player
-- Account 구조 정리
-- ID 체계

[Utility 기능]
- C#에서 기능 구현 시, 자주 사용할 만한 것들 함수화
- 라이브러리 괜찮은 것 적용 

[클라이언트]
(1) 허신영
- 맵
- 웨이브

[서버]
- 로그인 서버부터 구현 (중앙 서버)
- 서버/클라 프로토콜 구조

[기획]
- Excel Load
-- 서버 로드 및 클라 로드 개별로 구현 시킬지?
-- 서버에서 엑셀 로드 후에 Generate 해서 Client File까지 뽑아낼지
--- 엑셀 내에서 Deploy 범위를 정할 수 있음

